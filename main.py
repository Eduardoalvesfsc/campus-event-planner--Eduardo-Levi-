from datetime import datetime
# Planejador de Eventos do IFConecta
# modelo de dados do evento (dicion√°rio)

# Fun√ß√£o para validar a data
def validarData(dataStr):
    """
    Verifica se a data est√° no formato AAAA-MM-DD.
    Retorna True se for v√°lido, False caso contr√°rio.
    """
    try:
        datetime.strptime(dataStr, "%Y-%m-%d")
        return True
    except ValueError:
        return False
    
# Fun√ß√£o para adicionar evento
def adicionarEvento(listaEventos, nome, data, local, categoria):
     """
    Cria um novo evento (dicion√°rio) e adiciona na lista de eventos.
    Val√≠da a data e se os campos n√£o est√£o vazios.
    """
     # Verifica se todos os campos foram preenchidos
     if not nome or not data or not local or not categoria:
         print("‚ùå Erro: Todos os campos s√£o obrigat√≥rios")
         return
     
     # Val√≠da a data
     if not validarData(data):
         print("‚ùå Erro: Data invalida! Use o formato AAAA-MM-DD")
         return
    
     # Gera um ID √∫nico
     novoId = len(listaEventos) + 1

     # Cria o dicionario do evento
     evento = {
         "id": novoId,
         "nome": nome,
         "data": data,
         "local": local,
         "categoria": categoria, 
         "participado": False
     }

     # Adiciona na lista
     listaEventos.append(evento)
     print(f"‚úÖ Evento '{nome}' adicionado com sucesso!")

# Fun√ß√£o para listar todos os eventos
def listarEventos(listaEventos):
    """
    Mostra todos os eventos cadastrados na lista.
    """
    if not listaEventos:
        print("üì≠ Nenhum evento cadastrado.")
        return
    
    print("\n--- LISTA DE EVENTOS ---")
    for evento in listaEventos:
        print(f"ID: {evento['id']} | Nome: {evento ['nome']} | Data: {evento['data']} | Local: {evento['local']} | Categoria: {evento['categoria']} | Participado: {evento['participado']}")